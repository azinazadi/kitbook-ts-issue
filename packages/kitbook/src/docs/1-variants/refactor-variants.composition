<script context="module" lang="ts">
  import { defineComposition } from 'kitbook'

  export const config = defineComposition({
    viewports: [{ height: 40 }],
  })
</script>

<script lang="ts">
  import { Button } from 'svelte-pieces'

  const template = `I need help refactoring my \`variants.ts\` files according to recent api changes. My file is currently working on \`DeprecatedVariantsModule\` and I want you to refactor it to be like the \`VariantModule\` type defined in the \`kitbook.ts\` file. I'll give you an \`old.variants.ts\` file that I've already refactored to \`new.variants.ts\` so you can learn how to do it. Then please refactor my \`todo.variants.ts\` file for me.

Here's my types:

\`\`\`ts title="kitbook.ts"
import type { ComponentProps } from 'svelte'

export interface VariantsModule {
  shared_meta?: VariantMeta
  [key: string]: Variant<any>
}

export interface VariantMeta {
  description?: string
  viewports?: Viewport[]
  languages?: Language[]
  contexts?: MockedContext[]
  slot?: string | any
  csr?: false
  ssr?: false
  tests?: {
    skip?: boolean
    additional?: Record<string, Test>
    clientSideRendered?: boolean
  }
}

export type Variant<T extends SvelteComponent> = { _meta?: VariantMeta } & ComponentProps<T>

export interface DeprecatedVariantsModule {
  variants: DeprecatedVariant<any>[]
  viewports?: Viewport[]
  languages?: Language[]
}

export interface DeprecatedVariant<T extends SvelteComponent> {
  /** Don't copy the name field, but rather use it to name the exported Variant object, using capitals with underscores */
  name?: string
  description?: string
  viewports?: Viewport[]
  /** It's important to transfer an empty languages array if it exists as that tells Kitbook to just use it's first active language */
  languages?: Language[]
  props?: ComponentProps<T>
  contexts?: MockedContext[]
  /** only the 'default' slot is supported */
  slots?: Record<string, string | any>
  tests?: {
    skip?: boolean
    additional?: Record<string, Test>
    clientSideRendered?: boolean
  }
}

interface Viewport {
  name?: string
  width: number
  height: number
}

interface Language {
  name: string
  code: string
}

interface MockedContext {
  key: any
  context: any
}
\`\`\`

I already took this old version of a file:

\`\`\`ts title="old.variants.ts"
import type { DeprecatedVariant, Viewport } from 'kitbook'
import type Component from './+page.svelte'

export const viewports: Viewport[] = [
  { width: 400, height: 300 },
]

export const variants: DeprecatedVariant<Component>[] = [
  {
    name: 'first situation',
    props: {
      foo: 'bar',
    },
  },
  {
    name: 'second instance',
    languages: [],
    props: {
      foo: 'zam',
    },
  },
]
\`\`\`

And turned it into this:

\`\`\`ts title="new.variants.ts"
import type { Variant, VariantMeta } from 'kitbook'
import type Component from './+page.svelte'

export const shared_meta: VariantMeta = {
  viewports: [
    { width: 400, height: 300 }
  ]
}

const shared = {} satisfies Partial<Variant<Component>>

export const First_Situation: Variant<Component> = {
  ...shared,
  foo: 'bar',
}

export const Second_Instance: Variant<Component> = {
  ...shared,
  foo: 'zam',
  _meta: {
    languages: [],
  },
}
\`\`\`

Now please refactor this file according to what I've described above:

\`\`\`ts title="todo.variants.ts"
// your code here
\`\`\`
`

  async function copyPrompt() {
    const variantsFile = prompt(
      'Paste the contents of your *.variants.ts file here and it will be placed inside the prompt.',
    )
    await navigator.clipboard.writeText(template.replace('// your code here', variantsFile))
  }
</script>

<Button onclick={copyPrompt}>Ask for variants file contents and then copy below prompt with variants file included</Button>
